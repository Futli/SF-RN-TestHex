{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"../Typography\";\nimport Colors from \"../../constants/\\u0421olors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Header = function Header(props) {\n  var dark = props.dark,\n      scene = props.scene,\n      title = props.title;\n  var titleElement = useMemo(function () {\n    var value = (scene == null ? void 0 : scene.descriptor.options.title) || title || '';\n    return typeof value === 'string' ? _jsx(TouchableOpacity, {\n      activeOpacity: 1,\n      children: _jsx(Text, {\n        md: true,\n        light: true,\n        semiBold: true,\n        style: styles.title,\n        numberOfLines: 1,\n        children: value\n      })\n    }) : value;\n  }, [scene, title]);\n  return _jsx(LinearGradient, {\n    start: {\n      x: 0.2,\n      y: 0.1\n    },\n    style: [styles.container],\n    colors: Colors.Gradient,\n    locations: [0.08, 0.8],\n    children: _jsxs(View, {\n      style: styles.inner,\n      children: [_jsx(TouchableOpacity, {\n        style: styles.icon,\n        children: _jsx(Feather, {\n          name: \"chevron-left\",\n          size: 28,\n          color: dark ? Colors.TextPrimary : '#fff'\n        })\n      }), titleElement]\n    })\n  });\n};\n\nexport default Header;\nvar styles = StyleSheet.create({\n  icon: {\n    marginRight: 8\n  },\n  inner: {\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  title: {\n    maxWidth: Dimensions.get('screen').width - 70\n  },\n  container: {\n    height: 100,\n    padding: 16,\n    justifyContent: 'flex-end'\n  }\n});","map":{"version":3,"sources":["D:/Programms/SolutionFactory-RN-Test/components/Header/index.tsx"],"names":["React","useMemo","Feather","LinearGradient","Text","Colors","Header","props","dark","scene","title","titleElement","value","descriptor","options","styles","x","y","container","Gradient","inner","icon","TextPrimary","StyleSheet","create","marginRight","alignItems","flexDirection","maxWidth","Dimensions","get","width","height","padding","justifyContent"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAAuE,OAAvE;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;;;AAGA,OAAOC,IAAP;AACA,OAAOC,MAAP;;;;AASA,IAAMC,MAAkD,GAAG,SAArDA,MAAqD,CAACC,KAAD,EAAW;AAClE,MAAQC,IAAR,GAAgCD,KAAhC,CAAQC,IAAR;AAAA,MAAcC,KAAd,GAAgCF,KAAhC,CAAcE,KAAd;AAAA,MAAqBC,KAArB,GAAgCH,KAAhC,CAAqBG,KAArB;AAEA,MAAMC,YAAY,GAAGV,OAAO,CAAC,YAAM;AAC/B,QAAMW,KAAK,GAAG,CAAAH,KAAK,QAAL,YAAAA,KAAK,CAAEI,UAAP,CAAkBC,OAAlB,CAA0BJ,KAA1B,KAAmCA,KAAnC,IAA4C,EAA1D;AAEA,WAAO,OAAOE,KAAP,KAAiB,QAAjB,GAEC,KAAC,gBAAD;AACI,MAAA,aAAa,EAAE,CADnB;AAAA,gBAGI,KAAC,IAAD;AAAM,QAAA,EAAE,MAAR;AAAS,QAAA,KAAK,MAAd;AAAe,QAAA,QAAQ,MAAvB;AAAwB,QAAA,KAAK,EAAEG,MAAM,CAACL,KAAtC;AAA6C,QAAA,aAAa,EAAE,CAA5D;AAAA,kBACKE;AADL;AAHJ,MAFD,GAUDA,KAVN;AAWH,GAd2B,EAczB,CAACH,KAAD,EAAQC,KAAR,CAdyB,CAA5B;AAgBA,SACI,KAAC,cAAD;AACI,IAAA,KAAK,EAAE;AAAEM,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE;AAAb,KADX;AAEI,IAAA,KAAK,EAAE,CAACF,MAAM,CAACG,SAAR,CAFX;AAGI,IAAA,MAAM,EAAEb,MAAM,CAACc,QAHnB;AAII,IAAA,SAAS,EAAE,CAAC,IAAD,EAAO,GAAP,CAJf;AAAA,cAMI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEJ,MAAM,CAACK,KAApB;AAAA,iBACI,KAAC,gBAAD;AACI,QAAA,KAAK,EAAEL,MAAM,CAACM,IADlB;AAAA,kBAGI,KAAC,OAAD;AACI,UAAA,IAAI,EAAC,cADT;AAEI,UAAA,IAAI,EAAE,EAFV;AAGI,UAAA,KAAK,EAAEb,IAAI,GAAGH,MAAM,CAACiB,WAAV,GAAwB;AAHvC;AAHJ,QADJ,EAUKX,YAVL;AAAA;AANJ,IADJ;AAqBH,CAxCD;;AA0CA,eAAeL,MAAf;AAEA,IAAMS,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,IAAI,EAAE;AACFI,IAAAA,WAAW,EAAE;AADX,GADuB;AAI7BL,EAAAA,KAAK,EAAE;AACHM,IAAAA,UAAU,EAAE,QADT;AAEHC,IAAAA,aAAa,EAAE;AAFZ,GAJsB;AAQ7BjB,EAAAA,KAAK,EAAE;AACHkB,IAAAA,QAAQ,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiC;AADxC,GARsB;AAW7Bb,EAAAA,SAAS,EAAE;AACPc,IAAAA,MAAM,EAAE,GADD;AAEPC,IAAAA,OAAO,EAAE,EAFF;AAGPC,IAAAA,cAAc,EAAE;AAHT;AAXkB,CAAlB,CAAf","sourcesContent":["import React, { useMemo, useState, useCallback, useLayoutEffect } from 'react'\r\nimport { Feather } from '@expo/vector-icons'\r\nimport { LinearGradient } from 'expo-linear-gradient'\r\nimport { View, StyleSheet, Dimensions, TouchableOpacity } from 'react-native'\r\n\r\nimport Text from '../Typography'\r\nimport Colors from '../../constants/Ð¡olors'\r\n\r\ninterface InlineHeaderProps {\r\n    dark?: boolean\r\n    scene?: any\r\n    title?: string | object\r\n    transparent?: boolean\r\n}\r\n\r\nconst Header: React.FunctionComponent<InlineHeaderProps> = (props) => {\r\n    const { dark, scene, title, } = props\r\n\r\n    const titleElement = useMemo(() => {\r\n        const value = scene?.descriptor.options.title || title || ''\r\n\r\n        return typeof value === 'string'\r\n            ? (\r\n                <TouchableOpacity\r\n                    activeOpacity={1}\r\n                >\r\n                    <Text md light semiBold style={styles.title} numberOfLines={1}>\r\n                        {value}\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            )\r\n            : value\r\n    }, [scene, title])\r\n\r\n    return (\r\n        <LinearGradient\r\n            start={{ x: 0.2, y: 0.1 }}\r\n            style={[styles.container]}\r\n            colors={Colors.Gradient}\r\n            locations={[0.08, 0.8]}\r\n        >\r\n            <View style={styles.inner}>\r\n                <TouchableOpacity\r\n                    style={styles.icon}\r\n                >\r\n                    <Feather\r\n                        name='chevron-left'\r\n                        size={28}\r\n                        color={dark ? Colors.TextPrimary : '#fff'}\r\n                    />\r\n                </TouchableOpacity>\r\n                {titleElement}\r\n            </View>\r\n        </LinearGradient>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\nconst styles = StyleSheet.create({\r\n    icon: {\r\n        marginRight: 8\r\n    },\r\n    inner: {\r\n        alignItems: 'center',\r\n        flexDirection: 'row'\r\n    },\r\n    title: {\r\n        maxWidth: Dimensions.get('screen').width - 70\r\n    },\r\n    container: {\r\n        height: 100,\r\n        padding: 16,\r\n        justifyContent: 'flex-end'\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}