{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"type\", \"style\", \"value\", \"prefix\", \"onChange\", \"maxLength\", \"disabled\", \"inputRef\", \"multiline\", \"inputStyle\", \"placeholder\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport maskHex from \"../../utils/mask\";\nimport Colors from \"../../constants/\\u0421olors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CustomTextInput = function CustomTextInput(props) {\n  var _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      style = props.style,\n      value = props.value,\n      prefix = props.prefix,\n      onChange = props.onChange,\n      maxLength = props.maxLength,\n      disabled = props.disabled,\n      inputRef = props.inputRef,\n      multiline = props.multiline,\n      inputStyle = props.inputStyle,\n      placeholder = props.placeholder,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focused = _useState2[0],\n      setFocused = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      visible = _useState4[0],\n      setVisible = _useState4[1];\n\n  function handleChange(text) {\n    if (type === \"hex\") {\n      var _value = maskHex(text);\n\n      onChange(_value);\n    } else onChange(text);\n  }\n\n  var handleBlur = function handleBlur() {\n    setFocused(false);\n  };\n\n  var handleFocus = function handleFocus() {\n    type == 'hex' && (Keyboard.dismiss(), setFocused(true));\n    setFocused(true);\n  };\n\n  var commonProps = {\n    value: value,\n    placeholder: placeholder,\n    maxLength: maxLength,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onChangeText: function onChangeText(value) {\n      return handleChange(value);\n    },\n    editable: !disabled,\n    style: [styles.input, inputStyle, prefix && styles.inputPrefix],\n    selectionColor: Colors.Primary,\n    placeholderTextColor: Colors.TextPlaceholder\n  };\n  return _jsxs(LinearGradient, {\n    start: {\n      x: 0.2,\n      y: 0.1\n    },\n    style: [styles.container, style, multiline && styles.inputArea],\n    colors: focused ? ['rgb(242, 83, 56)', 'rgb(250, 131, 15)'] : [Colors.Border, Colors.Border],\n    locations: focused ? [0.08, 0.8] : [1, 1],\n    children: [_jsx(TextInput, _objectSpread(_objectSpread({\n      multiline: multiline,\n      keyboardType: 'default',\n      secureTextEntry: type === 'password' && !visible,\n      contextMenuHidden: type === 'password'\n    }, commonProps), rest)), type === 'password' && _jsx(TouchableOpacity, {\n      style: styles.eye,\n      onPress: function onPress() {\n        return setVisible(!visible);\n      },\n      children: _jsx(Feather, {\n        size: 24,\n        name: visible ? 'eye' : 'eye-off',\n        color: Colors.Primary\n      })\n    }), prefix && _jsx(View, {\n      style: styles.prefix,\n      children: prefix\n    })]\n  });\n};\n\nexport default CustomTextInput;\nvar styles = StyleSheet.create({\n  eye: {\n    top: 0,\n    right: 0,\n    padding: 8,\n    position: 'absolute'\n  },\n  icon: {\n    top: 10,\n    left: 10,\n    zIndex: 1,\n    position: 'absolute'\n  },\n  input: {\n    flex: 1,\n    color: Colors.TextPrimary,\n    padding: 10,\n    fontSize: 14,\n    borderRadius: 8,\n    backgroundColor: '#fff'\n  },\n  prefix: {\n    position: 'absolute',\n    paddingVertical: 6.5,\n    paddingHorizontal: 10\n  },\n  inputArea: {\n    height: 150\n  },\n  inputPrefix: {\n    paddingLeft: 26\n  },\n  container: {\n    height: 43,\n    padding: 2,\n    borderRadius: 10\n  },\n  transparent: {\n    flex: 1,\n    color: '#fff',\n    fontSize: 16,\n    paddingBottom: 2\n  }\n});","map":{"version":3,"sources":["D:/Programms/SolutionFactory-RN-Test/components/Input/index.tsx"],"names":["React","useState","Feather","LinearGradient","maskHex","Colors","CustomTextInput","props","type","style","value","prefix","onChange","maxLength","disabled","inputRef","multiline","inputStyle","placeholder","rest","focused","setFocused","visible","setVisible","handleChange","text","handleBlur","handleFocus","Keyboard","dismiss","commonProps","onBlur","onFocus","onChangeText","editable","styles","input","inputPrefix","selectionColor","Primary","placeholderTextColor","TextPlaceholder","x","y","container","inputArea","Border","eye","StyleSheet","create","top","right","padding","position","icon","left","zIndex","flex","color","TextPrimary","fontSize","borderRadius","backgroundColor","paddingVertical","paddingHorizontal","height","paddingLeft","transparent","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Feather } from '@expo/vector-icons'\r\nimport { LinearGradient } from 'expo-linear-gradient'\r\nimport { View, TextInput, StyleSheet, KeyboardType, TouchableOpacity, Keyboard } from 'react-native'\r\nimport maskHex from '../../utils/mask';\r\nimport Colors from '../../constants/Сolors'\r\nimport BottomSheetComponent from \"../BottomSheet\";\r\ninterface TextInputProps {\r\n    type?: 'text' | 'email' | 'password' | 'hex'    \r\n    value?: string\r\n    style?: object\r\n    prefix?: object\r\n    disabled?: boolean\r\n    inputRef?: React.RefObject<any>\r\n    onChange?: any\r\n    maxLength?: number\r\n    autoFocus?: boolean\r\n    multiline?: boolean\r\n    inputStyle?: object\r\n    placeholder?: string\r\n    keyboardType?: KeyboardType\r\n}\r\n\r\nconst CustomTextInput: React.FunctionComponent<TextInputProps> = (props) => {\r\n    const { type = 'text', style, value, prefix, onChange, maxLength, disabled, inputRef, multiline, inputStyle, placeholder, ...rest } = props\r\n\r\n    const [focused, setFocused] = useState(false)\r\n    const [visible, setVisible] = useState(false)\r\n    \r\n\r\n    function handleChange(text: string) {\r\n        if (type === \"hex\") {\r\n          const value = maskHex(text);\r\n          onChange(value);\r\n        } else  onChange(text);\r\n      }\r\n\r\n    const handleBlur = () => {\r\n        setFocused(false)\r\n    }\r\n\r\n    const handleFocus = () => {\r\n         type == 'hex' && (Keyboard.dismiss(), setFocused(true))\r\n         setFocused(true)\r\n       \r\n    }\r\n\r\n    \r\n\r\n    const commonProps = {\r\n        value,\r\n        placeholder,\r\n        maxLength,\r\n        onBlur: handleBlur,\r\n        onFocus: handleFocus,\r\n        onChangeText: (value: string) => handleChange(value),\r\n\r\n        editable: !disabled,\r\n\r\n        style: [styles.input, inputStyle, prefix && styles.inputPrefix],\r\n        selectionColor: Colors.Primary,\r\n        placeholderTextColor: Colors.TextPlaceholder\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <LinearGradient\r\n            start={{ x: 0.2, y: 0.1 }}\r\n            style={[\r\n                styles.container,\r\n                style,\r\n                multiline && styles.inputArea\r\n            ]}\r\n            colors={focused\r\n                ? ['rgb(242, 83, 56)', 'rgb(250, 131, 15)']\r\n                : [Colors.Border, Colors.Border]\r\n            }\r\n            locations={focused ? [0.08, 0.8] : [1, 1]}\r\n        >\r\n            \r\n            <TextInput\r\n                multiline={multiline}\r\n                keyboardType={'default'}\r\n                \r\n                secureTextEntry={type === 'password' && !visible}\r\n                contextMenuHidden={type === 'password'}\r\n                {...commonProps}\r\n                {...rest}\r\n            />\r\n            \r\n            {type === 'password' &&\r\n                <TouchableOpacity\r\n                    style={styles.eye}\r\n                    onPress={() => setVisible(!visible)}\r\n                >\r\n                    <Feather\r\n                        size={24}\r\n                        name={visible ? 'eye' : 'eye-off'}\r\n                        color={Colors.Primary}\r\n                    />\r\n                </TouchableOpacity>\r\n            }\r\n            {prefix &&\r\n                <View style={styles.prefix}>\r\n                    {prefix}\r\n                </View>\r\n            }\r\n        </LinearGradient>\r\n    )\r\n}\r\n\r\nexport default CustomTextInput\r\n\r\nconst styles = StyleSheet.create({\r\n    eye: {\r\n        top: 0,\r\n        right: 0,\r\n        padding: 8,\r\n        position: 'absolute'\r\n    },\r\n    icon: {\r\n        top: 10,\r\n        left: 10,\r\n        zIndex: 1,\r\n        position: 'absolute'\r\n    },\r\n    input: {\r\n        flex: 1,\r\n        color: Colors.TextPrimary,\r\n        padding: 10,\r\n        fontSize: 14,\r\n        borderRadius: 8,\r\n        backgroundColor: '#fff'\r\n    },\r\n    prefix: {\r\n        position: 'absolute',\r\n        paddingVertical: 6.5,\r\n        paddingHorizontal: 10\r\n    },\r\n    inputArea: {\r\n        height: 150\r\n    },\r\n    inputPrefix: {\r\n        paddingLeft: 26\r\n    },\r\n    container: {\r\n        height: 43,\r\n        padding: 2,\r\n        borderRadius: 10\r\n    },\r\n    transparent: {\r\n        flex: 1,\r\n        color: '#fff',\r\n        fontSize: 16,\r\n        paddingBottom: 2\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}