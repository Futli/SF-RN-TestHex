{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"type\", \"style\", \"prefix\", \"maxLength\", \"onChange\", \"onChangeMask\", \"disabled\", \"inputRef\", \"multiline\", \"inputStyle\", \"placeholder\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useRef, useState } from \"react\";\nimport { Feather } from \"@expo/vector-icons\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Colors from \"../../constants/\\u0421olors\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { HexKeyboard } from \"../HexKeyboard\";\nimport { BottomSheet } from \"react-native-elements\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CustomTextInput = function CustomTextInput(props) {\n  var _props$type = props.type,\n      type = _props$type === void 0 ? \"text\" : _props$type,\n      style = props.style,\n      prefix = props.prefix,\n      maxLength = props.maxLength,\n      onChange = props.onChange,\n      onChangeMask = props.onChangeMask,\n      disabled = props.disabled,\n      _props$inputRef = props.inputRef,\n      inputRef = _props$inputRef === void 0 ? useRef() : _props$inputRef,\n      multiline = props.multiline,\n      inputStyle = props.inputStyle,\n      placeholder = props.placeholder,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focused = _useState4[0],\n      setFocused = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      visible = _useState6[0],\n      setVisible = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hexShow = _useState8[0],\n      setHexShow = _useState8[1];\n\n  var onShow = function onShow() {\n    setHexShow(true);\n    inputRef.current.blur();\n    setFocused(true);\n  };\n\n  var onHide = function onHide() {\n    setHexShow(false);\n    inputRef.current.blur();\n    setFocused(false);\n  };\n\n  var handleBlur = function handleBlur() {\n    type === \"hex\" ? (setHexShow(true), setFocused(true)) : setFocused(false);\n  };\n\n  var handleFocus = function handleFocus() {\n    type === \"hex\" ? (onShow(), setFocused(true)) : setFocused(true);\n  };\n\n  var handleBackSpace = function handleBackSpace() {\n    onChangeMask(value.substring(0, value.length - 1));\n    setValue(function (value) {\n      return value.substring(0, value.length - 1);\n    });\n  };\n\n  var handleKey = function handleKey(text) {\n    value.length < 8 && (onChangeMask(value + text), setValue(function (value) {\n      return value + text;\n    }));\n  };\n\n  var commonProps = {\n    value: value,\n    placeholder: placeholder,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onChangeText: type === \"hex\" ? onChangeMask : onChange,\n    maxLength: maxLength,\n    editable: !disabled,\n    style: [styles.input, inputStyle, prefix && styles.inputPrefix],\n    selectionColor: Colors.Primary,\n    placeholderTextColor: Colors.TextPlaceholder\n  };\n  return _jsxs(LinearGradient, {\n    start: {\n      x: 0.2,\n      y: 0.1\n    },\n    style: [styles.container, style, multiline && styles.inputArea],\n    colors: focused ? [\"rgb(242, 83, 56)\", \"rgb(250, 131, 15)\"] : [Colors.Border, Colors.Border],\n    locations: focused ? [0.08, 0.8] : [1, 1],\n    children: [_jsxs(SafeAreaProvider, {\n      children: [_jsx(TextInput, _objectSpread(_objectSpread({\n        ref: inputRef,\n        multiline: multiline,\n        showSoftInputOnFocus: type === \"hex\" ? false : true,\n        keyboardType: type === \"email\" ? \"email-address\" : \"default\",\n        secureTextEntry: type === \"password\" && !visible,\n        contextMenuHidden: type === \"password\"\n      }, commonProps), rest)), type == \"hex\" && _jsx(TouchableWithoutFeedback, {\n        onPress: function onPress() {\n          return setHexShow(false);\n        },\n        children: _jsx(BottomSheet, {\n          modalProps: {\n            animationType: \"fade\"\n          },\n          isVisible: hexShow,\n          containerStyle: styles.keyboardStyle,\n          children: _jsx(HexKeyboard, {\n            hideKeyboard: function hideKeyboard() {\n              return setHexShow(false);\n            },\n            backSpace: handleBackSpace,\n            insertText: function insertText(e) {\n              return handleKey(e);\n            },\n            style: styles.keyboardStyle\n          })\n        })\n      })]\n    }), type === \"password\" && _jsx(TouchableOpacity, {\n      style: styles.eye,\n      onPress: function onPress() {\n        return setVisible(!visible);\n      },\n      children: _jsx(Feather, {\n        size: 24,\n        name: visible ? \"eye\" : \"eye-off\",\n        color: Colors.Primary\n      })\n    }), prefix && _jsx(View, {\n      style: styles.prefix,\n      children: prefix\n    })]\n  });\n};\n\nexport default CustomTextInput;\nvar styles = StyleSheet.create({\n  eye: {\n    top: 0,\n    right: 0,\n    padding: 8,\n    position: \"absolute\"\n  },\n  icon: {\n    top: 10,\n    left: 10,\n    zIndex: 1,\n    position: \"absolute\"\n  },\n  input: {\n    flex: 1,\n    color: Colors.TextPrimary,\n    padding: 10,\n    fontSize: 14,\n    borderRadius: 8,\n    backgroundColor: \"#fff\"\n  },\n  prefix: {\n    position: \"absolute\",\n    paddingVertical: 6.5,\n    paddingHorizontal: 10\n  },\n  inputArea: {\n    height: 150\n  },\n  inputPrefix: {\n    paddingLeft: 26\n  },\n  container: {\n    height: 43,\n    padding: 2,\n    borderRadius: 10\n  },\n  transparent: {\n    flex: 1,\n    color: \"#fff\",\n    fontSize: 16,\n    paddingBottom: 2\n  },\n  keyboardStyle: {\n    flex: 2,\n    bottom: 0,\n    backgroundColor: \"transparent\"\n  }\n});","map":{"version":3,"sources":["D:/Programms/SolutionFactory-RN-Test/components/Input/index.tsx"],"names":["React","useRef","useState","Feather","LinearGradient","Colors","SafeAreaProvider","HexKeyboard","BottomSheet","CustomTextInput","props","type","style","prefix","maxLength","onChange","onChangeMask","disabled","inputRef","multiline","inputStyle","placeholder","rest","value","setValue","focused","setFocused","visible","setVisible","hexShow","setHexShow","onShow","current","blur","onHide","handleBlur","handleFocus","handleBackSpace","substring","length","handleKey","text","commonProps","onBlur","onFocus","onChangeText","editable","styles","input","inputPrefix","selectionColor","Primary","placeholderTextColor","TextPlaceholder","x","y","container","inputArea","Border","animationType","keyboardStyle","e","eye","StyleSheet","create","top","right","padding","position","icon","left","zIndex","flex","color","TextPrimary","fontSize","borderRadius","backgroundColor","paddingVertical","paddingHorizontal","height","paddingLeft","transparent","paddingBottom","bottom"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { Feather } from \"@expo/vector-icons\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport {\r\n  View,\r\n  TextInput,\r\n  StyleSheet,\r\n  KeyboardType,\r\n  TouchableOpacity,\r\n  TouchableWithoutFeedback,\r\n} from \"react-native\";\r\nimport maskHex from \"../../utils/mask\";\r\nimport Colors from \"../../constants/Сolors\";\r\nimport { SafeAreaProvider, SafeAreaView } from \"react-native-safe-area-context\";\r\nimport { HexKeyboard } from \"../HexKeyboard\";\r\nimport { BottomSheet } from \"react-native-elements\";\r\n\r\ninterface TextInputProps {\r\n  type?: \"text\" | \"email\" | \"password\" | \"hex\";\r\n  value?: string;\r\n  style?: object;\r\n  prefix?: object;\r\n  disabled?: boolean;\r\n  inputRef?: React.RefObject<any>;\r\n  onChange?: (value: string) => void;\r\n  onChangeMask?: any;\r\n  autoFocus?: boolean;\r\n  multiline?: boolean;\r\n  inputStyle?: object;\r\n  placeholder?: string;\r\n  maxLength?: number;\r\n  keyboardType?: KeyboardType;\r\n}\r\n\r\nconst CustomTextInput: React.FunctionComponent<TextInputProps> = (props) => {\r\n  const {\r\n    type = \"text\",\r\n    style,\r\n    prefix,\r\n    maxLength,\r\n    onChange,\r\n    onChangeMask,\r\n    disabled,\r\n    inputRef = useRef(),\r\n    multiline,\r\n    inputStyle,\r\n    placeholder,\r\n    ...rest\r\n  } = props;\r\n\r\n  const [value, setValue] = useState(\"\");\r\n  const [focused, setFocused] = useState(false);\r\n  const [visible, setVisible] = useState(false);\r\n  const [hexShow, setHexShow] = useState(false);\r\n\r\n  const onShow = () => {\r\n    setHexShow(true);    \r\n    inputRef.current.blur()\r\n    setFocused(true);\r\n  };\r\n\r\n  const onHide = () => {\r\n    setHexShow(false);\r\n    inputRef.current.blur()\r\n    setFocused(false);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    type === \"hex\" ? (setHexShow(true), setFocused(true)) : \r\n    setFocused(false)\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    type === \"hex\" ? (onShow(), setFocused(true)) : \r\n    setFocused(true);\r\n  };\r\n\r\n  const handleBackSpace = () => {\r\n    onChangeMask(value.substring(0, value.length - 1));\r\n    setValue((value) => value.substring(0, value.length - 1));\r\n  };\r\n\r\n  const handleKey = (text: string) => {\r\n    value.length < 8 &&\r\n      (onChangeMask(value + text), setValue((value) => value + text));\r\n    \r\n  };\r\n\r\n  const commonProps = {\r\n    value,\r\n    placeholder,\r\n    onBlur: handleBlur,\r\n    onFocus: handleFocus,\r\n    onChangeText: type === \"hex\" ? onChangeMask : onChange,\r\n    maxLength,\r\n    editable: !disabled,\r\n    style: [styles.input, inputStyle, prefix && styles.inputPrefix],\r\n    selectionColor: Colors.Primary,\r\n    placeholderTextColor: Colors.TextPlaceholder,\r\n  };\r\n\r\n  return (\r\n    <LinearGradient\r\n      start={{ x: 0.2, y: 0.1 }}\r\n      style={[styles.container, style, multiline && styles.inputArea]}\r\n      colors={\r\n        focused\r\n          ? [\"rgb(242, 83, 56)\", \"rgb(250, 131, 15)\"]\r\n          : [Colors.Border, Colors.Border]\r\n      }\r\n      locations={focused ? [0.08, 0.8] : [1, 1]}\r\n    >\r\n      <SafeAreaProvider>\r\n        <TextInput\r\n          ref={inputRef}\r\n          multiline={multiline}\r\n          showSoftInputOnFocus={type === \"hex\" ? false : true}\r\n          keyboardType={type === \"email\" ? \"email-address\" : \"default\"}\r\n          secureTextEntry={type === \"password\" && !visible}\r\n          contextMenuHidden={type === \"password\"}\r\n          {...commonProps}\r\n          {...rest}\r\n        />\r\n        {type == \"hex\" && (\r\n            <TouchableWithoutFeedback onPress={()=>setHexShow(false)}>\r\n          <BottomSheet\r\n            modalProps={{\r\n              animationType: \"fade\",\r\n            }}\r\n            isVisible={hexShow}\r\n            containerStyle={styles.keyboardStyle}\r\n          >\r\n            <HexKeyboard\r\n              hideKeyboard={()=>setHexShow(false)}\r\n              backSpace={handleBackSpace}\r\n              insertText={(e: string) => handleKey(e)}\r\n              style={styles.keyboardStyle}\r\n            />\r\n          </BottomSheet>\r\n          </TouchableWithoutFeedback>\r\n        )}\r\n      </SafeAreaProvider>\r\n      {type === \"password\" && (\r\n        <TouchableOpacity\r\n          style={styles.eye}\r\n          onPress={() => setVisible(!visible)}\r\n        >\r\n          <Feather\r\n            size={24}\r\n            name={visible ? \"eye\" : \"eye-off\"}\r\n            color={Colors.Primary}\r\n          />\r\n        </TouchableOpacity>\r\n      )}\r\n      {prefix && <View style={styles.prefix}>{prefix}</View>}\r\n    </LinearGradient>\r\n  );\r\n};\r\n\r\nexport default CustomTextInput;\r\n\r\nconst styles = StyleSheet.create({\r\n  eye: {\r\n    top: 0,\r\n    right: 0,\r\n    padding: 8,\r\n    position: \"absolute\",\r\n  },\r\n  icon: {\r\n    top: 10,\r\n    left: 10,\r\n    zIndex: 1,\r\n    position: \"absolute\",\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    color: Colors.TextPrimary,\r\n    padding: 10,\r\n    fontSize: 14,\r\n    borderRadius: 8,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  prefix: {\r\n    position: \"absolute\",\r\n    paddingVertical: 6.5,\r\n    paddingHorizontal: 10,\r\n  },\r\n  inputArea: {\r\n    height: 150,\r\n  },\r\n  inputPrefix: {\r\n    paddingLeft: 26,\r\n  },\r\n  container: {\r\n    height: 43,\r\n    padding: 2,\r\n    borderRadius: 10,\r\n  },\r\n  transparent: {\r\n    flex: 1,\r\n    color: \"#fff\",\r\n    fontSize: 16,\r\n    paddingBottom: 2,\r\n  },\r\n  keyboardStyle: {\r\n    flex: 2,\r\n    bottom: 0,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}